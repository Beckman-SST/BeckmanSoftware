# Documentação Técnica - Sistema de Processamento de Imagens

## Visão Geral do Sistema
O sistema foi desenvolvido para análise automatizada de postura e ergonomia, utilizando técnicas avançadas de visão computacional. Consiste em dois componentes principais que trabalham em conjunto:

1. `app.py`: Aplicação Flask que implementa:
   - Interface web responsiva e intuitiva
   - Gerenciamento de sessões de usuário
   - Sistema de upload com validação de arquivos
   - Processamento assíncrono de múltiplos arquivos
   - Exibição em tempo real do progresso
   - Galeria interativa de resultados

2. `processamento.py`: Módulo core de processamento que implementa:
   - Pipeline completo de análise de imagens/vídeos
   - Detecção precisa de pontos corporais
   - Identificação de dispositivos eletrônicos
   - Cálculos ergonômicos avançados
   - Sistema de preservação de privacidade

## Arquitetura Detalhada do Sistema

### Componente app.py (Interface Web)
1. **Rotas Principais**:
   - `/`: Página inicial com upload e galeria
   - `/upload`: Endpoint para recebimento de arquivos
   - `/status`: API para monitoramento de progresso
   - `/resultados`: Visualização de análises concluídas

2. **Funcionalidades**:
   - Validação de tipos de arquivo (JPG, JPEG, PNG, MP4, AVI)
   - Limite de tamanho configurável por arquivo
   - Processamento em background usando threads
   - Cache de resultados para acesso rápido
   - Sistema de notificações em tempo real

### Componente processamento.py (Core)
1. **Função `processar_imagem()`**:
   - Coordena o pipeline completo de processamento
   - Gerencia threads para processamento paralelo
   - Implementa retry em caso de falhas
   - Otimiza uso de memória e CPU
   - Gera logs detalhados do processamento

2. **Função `detectar_landmarks()`**:
   - Utiliza MediaPipe para detecção precisa
   - Identifica 33 pontos corporais principais
   - Tracking em tempo real para vídeos
   - Filtragem de detecções instáveis
   - Calibração automática por frame

3. **Função `identificar_dispositivos()`**:
   - Modelo YOLOv8 customizado para eletrônicos
   - Detecção de monitores, notebooks, smartphones
   - Análise de posicionamento dos dispositivos
   - Cálculo de distâncias relativas
   - Identificação de múltiplos dispositivos

4. **Função `calcular_angulos()`**:
   - Análise geométrica de postura
   - Cálculo de ângulos cervicais
   - Avaliação de curvatura da coluna
   - Detecção de assimetrias posturais
   - Geração de relatórios ergonômicos

5. **Função `ocultar_rosto()`**:
   - Blur inteligente com detecção facial
   - Preservação de privacidade configurável
   - Rastreamento facial em vídeos
   - Ajuste automático de intensidade
   - Processamento otimizado

## Fluxo de Processamento Detalhado
1. **Recebimento e Validação (app.py)**:
   - Upload via interface web com drag-and-drop
   - Verificação de integridade dos arquivos
   - Geração de ID único por processamento
   - Criação de diretório temporário

2. **Pré-processamento (processamento.py)**:
   - Redimensionamento inteligente
   - Normalização de cores e contraste
   - Extração de frames em vídeos
   - Otimização de memória

3. **Processamento Principal**:
   - Detecção de landmarks corporais
   - Identificação de dispositivos
   - Cálculos ergonômicos
   - Aplicação de privacidade

4. **Pós-processamento**:
   - Geração de visualizações
   - Compilação de resultados
   - Criação de relatórios
   - Limpeza de arquivos temporários

## Integração e Comunicação
1. **app.py → processamento.py**:
   - Chamadas assíncronas via threads
   - Passagem de parâmetros configuráveis
   - Sistema de callbacks para progresso
   - Tratamento de exceções

2. **processamento.py → app.py**:
   - Retorno de resultados estruturados em JSON
   - Notificações de progresso em tempo real
   - Logs detalhados de processamento
   - Sinais de conclusão/erro

## Configurações e Parâmetros
1. **Configurações do Servidor**:
   - Porta: 5000 (padrão)
   - Host: 127.0.0.1 (desenvolvimento)
   - Threads: 4 (configurável)
   - Timeout: 300s (ajustável)

2. **Parâmetros de Processamento**:
   - Resolução máxima: 1920x1080
   - Confiança mínima: 0.7
   - Batch size: 32
   - Threshold de detecção: 0.5

## Tratamento de Erros e Logs
1. **Sistema de Logging**:
   - Logs separados por componente
   - Níveis: INFO, WARNING, ERROR
   - Rotação automática de logs
   - Timestamps precisos

2. **Tratamento de Erros**:
   - Retry automático em falhas
   - Timeout configurável
   - Limpeza de recursos em erro
   - Notificações ao usuário

## Exemplo de Uso Avançado
```python
from processamento import processar_imagem, ConfigProcessamento

# Configuração personalizada
config = ConfigProcessamento(
    resolucao_maxima=(1920, 1080),
    confianca_minima=0.7,
    preservar_privacidade=True,
    modo_video=True
)

# Processamento com configuração
resultado = processar_imagem(
    caminho_arquivo,
    config=config,
    callback_progresso=atualizar_progresso
)

# Análise dos resultados
print(f"Ângulos detectados: {resultado['angulos']}")
print(f"Dispositivos: {resultado['dispositivos']}")
print(f"Tempo de processamento: {resultado['tempo_total']}s")
```

## Exemplo de Uso
```python
from processamento import processar_imagem

resultado = processar_imagem(caminho_arquivo)
print(resultado['angulos'])
print(resultado['dispositivos'])
```